# Base type for all events in the system
Event:
  origin: ""        # the origin of the event (content specific to subtype). Mostly a resource id
  origin_type: ""   # the type of origin (e.g. resource type, etc) or empty
  description: ""   # readable description of the event (not required)
  ts_created: !!python/long 0    # timestamp of event created in millis in UNIX epoch
  base_types: []    # List of event super types
  sub_type: ""      # A specialization of the event_type expressed by this object type (or empty)
  actor_id: ""      # The actor ID requesting the action causing the event
---

# Object containing additional computed information about one Event
EventComputedAttributes:
  event: !Event           # The actual event object or None
  event_id: ""            # The event id of the described Event
  ts_computed: !!python/long 0        # Timestamp when event attributes were computed
  event_summary: ""       # A summary str describing event based on type and core attributes
  special_attributes: ""  # A str with additional event attributes in printable form
  event_attributes_formatted: ""  # A str with event attributes in pretty printed form with newlines
---

# ------------------------------------------------------------------------------------
# Resource Events
# Events about the registration of a resource in the registry and its lifecycle
#
# origin: set to the resource_id
# origin_type: the type of resource
# sub_type: event specific
# ------------------------------------------------------------------------------------

# Base type for resource related events in the system.
ResourceEvent: !Extends_Event

---
# Event indicating that a resource changed its life cycle or was created.
# The subtype is lcstate.availability (allowing *.PRIVATE queries)
ResourceLifecycleEvent: !Extends_ResourceEvent
  lcstate: ""
  lcstate_before: ""
  availability: ""
  availability_before: ""
  transition_event: ""

# Event indicating that resource attributes were changed or the resource was created or deleted
ResourceModifiedEvent: !Extends_ResourceEvent
  mod_type: !enum (name=ResourceModificationType, values=(CREATE, UPDATE, RETIRE, DELETE), default=UPDATE)

# Event indicating that a (taskable) resource was commanded and a result is available
ResourceCommandEvent: !Extends_ResourceEvent
  command: ""
  result: ""

# Event created by an operator of a resource, for instance to manually indicate a modification or error.
ResourceOperatorEvent: !Extends_ResourceEvent

# Event created when a user reports an issue, contains a generated guid in the
# description that should line up with the email.
ResourceIssueReportedEvent: !Extends_ResourceEvent


# ------------------------------------------------------------------------------------
# Directory Events
# Events about the registration of an entry in the directory
#
# origin: set to the org_id + ".DIR"
# sub_type: event specific
# ------------------------------------------------------------------------------------

# Base type for directory related events in the system.
DirectoryEvent: !Extends_Event
---

# Event indicating that directory attributes were changed or the entry was created or deleted.
# sub_type: REGISTER/UNREGISTER.path.to.parent
DirectoryModifiedEvent: !Extends_DirectoryEvent
  org: ""
  parent: ""
  key: ""
  mod_type: !enum (name=DirectoryModificationType, values=(CREATE, UPDATE, DELETE), default=CREATE)
---

# ------------------------------------------------------------------------------------
# Agent Events
# Events about an agent in the system (but not about the controlled device or the registry entry)
# origin: the resource_id of the agent
#  origin_type: type of agent resource
#  sub_type: event specific
# ------------------------------------------------------------------------------------

ResourceAgentEvent: !Extends_Event
---

ResourceAgentCommandEvent: !Extends_ResourceAgentEvent
  command: ""
  execute_command: ""
  args: []
  kwargs: {}
  result: {}

ResourceAgentErrorEvent: !Extends_ResourceAgentEvent
  command: ""
  execute_command: ""
  args: []
  kwargs: {}
  error_type: ""
  error_msg: ""
  error_code: -1

ResourceAgentIOEvent: !Extends_ResourceAgentEvent
  source_type: ""
  stats: {}

ResourceAgentConnectionLostErrorEvent: !Extends_ResourceAgentEvent
  error_msg: "Connection to resource device was lost."
  error_code: -1

ResourceAgentStateEvent: !Extends_ResourceAgentEvent
  state: ""

ResourceAgentResourceStateEvent: !Extends_ResourceAgentEvent
  state: ""

ResourceAgentResourceConfigEvent: !Extends_ResourceAgentEvent
  config: {}

ResourceAgentAsyncResultEvent: !Extends_ResourceAgentEvent
  command: ""
  desc: ""
  result: ""

ResourceAgentExecutionStatus: !enum (values=(OK, FAILED), default=OK)

---

ResourceAgentLifecycleEvent: !Extends_ResourceAgentEvent
  # sub_types: STARTED, STOPPED
  process_id: ""
  agent_state: ""
  execution_status: !ResourceAgentExecutionStatus

---

# ------------------------------------------------------------------------------------
# Device Events
# Events from a resource agent about the manipulation of an external taskable resource (called "device")
# origin: resource_id of the device
#  origin_type: type of device resource
#  sub_type: event specific
# ------------------------------------------------------------------------------------

# Base type of events related to physical devices such as instruments
DeviceEvent: !Extends_Event
    # The origin is a device (resource) id

---
DeviceSpecificLifecycleEvent: !Extends_DeviceEvent

DeviceCommonLifecycleEvent: !Extends_DeviceEvent

DeviceCommandEvent: !Extends_ResourceCommandEvent

DeviceOperatorEvent: !Extends_ResourceOperatorEvent

---
PlatformEvent: !Extends_DeviceEvent

---


# ------------------------------------------------------------------------------------
# Information Content Events
# Events about the content of an information resource
#
# origin: set to the resource_id
# origin_type: the type of resource
# ------------------------------------------------------------------------------------

InformationContentEvent: !Extends_Event
  author: ""

InformationStatus: !enum (values=(NORMAL, ERROR, OFFLINE), default=NORMAL)

InformationContentAccessEnum: !enum (values=(VIEW, REALTIME_VIEW, DOWNLOAD, SUBSCRIBE, MODIFY, OPERATOR_ACTION, OTHER), default=VIEW)

---

InformationContentModifiedEvent: !Extends_InformationContentEvent
  # origin is the resource identifier
  # ts created should reflect when the change occurred

InformationContentStatusEvent: !Extends_InformationContentEvent
  # description should be filled in
  # New status of the information
  status: !InformationStatus
  
InformationContentAccessedEvent: !Extends_InformationContentEvent
  # The origin_type identifies the type of resource, e.g. DataProduct.
  # The sub_type identifies the type of access using the InformationContentAccessEnum

  # Additional information about access
  access_params: {}


# Seems to be needed/used only by transforms when an error is encountered
ExceptionEvent: !Extends_Event
  exception_type: ""
  exception_message: ""


# ------------------------------------------------------------------------------------
# Policy / Governance Event
# Events about policy in the system
# ------------------------------------------------------------------------------------

NegotiationEvent: !Extends_Event
  # The origin is the id of the negotiation id
  originator: ""

---

EnrollmentNegotiationStatusEvent: !Extends_NegotiationEvent

RequestRoleNegotiationStatusEvent: !Extends_NegotiationEvent
  role_name: ""

AcquireResourceNegotiationStatusEvent: !Extends_NegotiationEvent
  resource_id: ""

---

AcquireResourceExclusiveNegotiationStatusEvent: !Extends_AcquireResourceNegotiationStatusEvent

---

#Base Policy Event
PolicyEvent: !Extends_Event

---

# The ResourcePolicyEvent is a little different than a Policy resource object event, in that it does not get published
# when the underlying policy object is updated in the resource registry but by business logic in the Policy Management
# Service as appropriate, like when it is assigned or removed from a resource
# The origin is the policy_id
ResourcePolicyEvent: !Extends_PolicyEvent
  resource_id: ""
  resource_type: ""
  resource_name: ""
  op: ""      #Optional op name

# The RelatedResourcePolicyEvent is different than a ResourcePolicyEvent object, in that it does not get published
# when the underlying policy object is updated in the resource registry but by business logic in the Policy Management
# Service when a related resource's policy is updated.
# The origin is the policy_id
RelatedResourcePolicyEvent: !Extends_PolicyEvent
  resource_id: ""

# The ServicePolicyEvent is a little different that a Policy resource object event, in that it does not get published
# when the underlying policy object is updated in the resource registry but by business logic in the Policy Management
# Service as appropriate, like when it is assigned or removed from a service
# The origin is the policy_id
ServicePolicyEvent: !Extends_PolicyEvent
  #If the service_name is not set to a specific name, then all services are assumed.
  service_name: ""
  op: ""   #Optional op name


#This event is used to flush the caches containing user roles
UserRoleCacheResetEvent: !Extends_PolicyEvent

# ------------------------------------------------------------------------------------
# Org Event
# Events from an Org about its members or resources
# ------------------------------------------------------------------------------------


#Base Org Event
#The origin is the org_id for all events based off of this OrgEvent
OrgEvent: !Extends_Event
  org_name: ""

---

#This event is used as a parent event for User Role related events
UserRoleModifiedEvent: !Extends_OrgEvent
  role_name: ""

---

#The following events are published when Org actions occur

OrgNegotiationInitiatedEvent: !Extends_OrgEvent
  negotiation_id: ""

OrgMembershipGrantedEvent: !Extends_OrgEvent

OrgMembershipCancelledEvent: !Extends_OrgEvent

UserRoleGrantedEvent: !Extends_UserRoleModifiedEvent

UserRoleRevokedEvent: !Extends_UserRoleModifiedEvent

ResourceSharedEvent: !Extends_OrgEvent
  resource_id: ""

ResourceUnsharedEvent: !Extends_OrgEvent
  resource_id: ""

ResourceCommitmentCreatedEvent: !Extends_OrgEvent
  resource_id: ""
  commitment_id: ""
  commitment_type: ""

ResourceCommitmentReleasedEvent: !Extends_OrgEvent
  resource_id: ""
  commitment_id: ""
  commitment_type: ""

---

# ------------------------------------------------------------------------------------
# Execution Event
# Events about compute resources (containers, processes, EPUs, EEs)
# ------------------------------------------------------------------------------------

ContainerConfigModifiedEvent: !Extends_Event

ContainerStateEnum: !enum (values=(START, STOP, TERMINATE, ERROR), default=START)

---
ContainerLifecycleEvent: !Extends_Event
  # The origin is the container id
  state: !ContainerStateEnum
  host: ""

ProcessLifecycleEvent: !Extends_Event
  # The origin is the process id
  state: !ProcessStateEnum
  container_id: ""
  process_type: ""
  process_name: ""
  process_resource_id: ""
  service_name: ""

# Event for the scheduler's timer functionality
TimerEvent: !Extends_Event
# The Scheduler fires off this event so that services can react to it and perform tasks
SchedulerEvent: !Extends_Event

# a reload_user_info event generated when a notification is created, updated or deleted
ReloadUserInfoEvent: !Extends_Event
  notification_id: ""

ContainerManagementRequest: !Extends_Event
  predicate: !ContainerManagementPredicate
  action: !ContainerManagementAction

ContainerManagementResult: !Extends_Event
  action: !ContainerManagementAction
  outcome: ""
